{
    "pipes": [
        {
            "name": "ColumnNamesPipe",
            "id": "pipe-ColumnNamesPipe-fd1e8881e8b73af54e39a855f78481ec26c0e67913669f2f809574f1ec2504cdae3d1818963fdfdf794f40a988eb5f6e0dee1caa98c755e9650ee0d860dcc2c5",
            "file": "projects/ui/src/lib/kanban/column-names.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "toggleCollapseSwimlane",
                    "args": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allItems",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allItems",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allItems",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allItems",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "columnNames",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'columnNames',\n  standalone: true\n})\nexport class ColumnNamesPipe implements PipeTransform {\n\n  transform(data: any, allItems: any): string[] {\n    const columnNames: string[] = [];\n\n    // Iterate over each column in the swimlane\n    data.columns.forEach((column: any) => {\n      // Push the column heading into the columnNames array\n      columnNames.push(column);\n    });\n    this.toggleCollapseSwimlane(data, allItems);\n    return columnNames;\n  }\n\n  toggleCollapseSwimlane(column: any, allItems: any) {\n    allItems.forEach((data: any) => {\n      const idealWidth = 100 / data.columns.length;\n      data.columns.forEach((column: any) => {\n        column.idealWidth = idealWidth;\n\n        if (column.collapsed) {\n          column.idealWidth = 10;\n        }\n      })\n\n      // }\n    });\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Column",
            "id": "interface-Column-0732486714dede1250ced5fe0375703b148187c973424cc298c1468be377fc63c38e14c67b88d9bbc6f2fc804a2cbbbd0b422bc98886c4a9052dc96fa440ceb3",
            "file": "projects/ui/src/lib/kanban/kanban.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, QueryList, ViewChildren } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ColumnNamesPipe } from './column-names.pipe';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\ninterface LibraryItem {\n  type: 'link' | 'chip' | 'budget' | 'timeFrame' | 'avatar' | string; // Types for different items\n  label?: string; // Label for the item (optional depending on type)\n  value?: string | string[] | { value?: string; backgroundColor?: string; foregroundColor?: string; }[]; // Value for the item (optional depending on type)\n  url?: string; // URL for links (optional depending on type)\n  currency?: string; // Currency for budget (optional depending on type)\n  amount?: number; // Amount for budget (optional depending on type)\n  reference?: string; // Reference for links (optional depending on type)\n  author?: { // Author details (optional depending on type)\n    photo?: string;\n    name?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  header: LibraryItem[];\n  body: {\n    description: string;\n  };\n  footer: LibraryItem[];\n  borderColor?: string;\n  toggleColumn?: boolean;\n}\n\ninterface Column {\n  id: number;\n  heading: string;\n  tasks: Task[];\n  collapsed?: boolean;\n  action?: {\n    label: string;\n    event: ($event: any, column: Column) => void;\n  };\n}\n\ninterface Swimlane {\n  id: number;\n  heading: string;\n  columns: Column[];\n}\n\ntype KanbanData = Column[] | Swimlane[] | any[];\n\n@Component({\n  selector: 'shorterloop-kanban',\n  standalone: true,\n  imports: [CommonModule, DragDropModule, MatIconModule, MatExpansionModule, ColumnNamesPipe],\n  templateUrl: './kanban.component.html',\n  styleUrls: ['./kanban.component.css'],\n})\nexport class KanbanComponent implements AfterViewInit {\n  @Input() data: KanbanData = [];\n  @Input() type = '';\n  @Input() tableHeaders: any = [];\n\n  @ViewChildren('kanbanList') kanbanLists!: QueryList<ElementRef>;\n\n  constructor(public sanitizer: DomSanitizer) { }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    setTimeout((_: any) => {\n      this.adjustColumnHeights(event.container.id);\n      this.adjustColumnHeights(event.previousContainer.id);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.adjustColumnHeights();\n    // this.setupMutationObserver();\n  }\n\n  private adjustColumnHeights(only = '') {\n    let listing: any = this.kanbanLists;\n\n    if (only) {\n      const swimlane: any = document.querySelector('#' + only);\n      const swimlaneRow = swimlane.getAttribute('customId');\n      //@ts-ignore\n      listing = this.kanbanLists._results.filter((list: any) => list.nativeElement.getAttribute('customId') === swimlaneRow)\n    }\n    if (listing) {\n      const columnHeights: any = listing.map((list: any) => {\n        const children = Array.from(list.nativeElement.children);\n        const totalHeight = children.reduce((height: any, child: any) => {\n          const childStyles = window.getComputedStyle(child);\n          const marginBottom = parseFloat(childStyles.marginBottom);\n          const paddingBottom = parseFloat(childStyles.paddingBottom);\n          return height + child.offsetHeight + marginBottom + paddingBottom;\n        }, 0);\n        return totalHeight;\n      });\n\n      const maxHeight = Math.max(...columnHeights);\n      listing.forEach((list: any) => {\n        (list.nativeElement as HTMLElement).style.height = `${maxHeight}px`;\n      });\n    }\n  }\n\n  addAction($event: any, column: Column) {\n    column.action?.event($event, column);\n  }\n\n  toggleCollapse(column: Column) {\n    const collapsedColumns = this.data.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.data.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n\n  toggleCollapseSwimlane(column: any) {\n    // Toggle the collapsed state of the specified column\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.id === column.id) {\n          col.collapsed = !col.collapsed;\n        }\n      });\n    });\n\n    // Calculate the number of collapsed columns and the remaining width\n    // @ts-ignore\n    const totalColumns = this.data[0].columns.length;\n    let collapsedColumns = this.data.flatMap((swimlane: any) => swimlane.columns).filter((col: any) => col.collapsed);\n    // Filter out duplicates by id\n    collapsedColumns = collapsedColumns.reduce((acc, current) => {\n      const x = acc.find((item: any) => item.id === current.id);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    const remainingWidth = 100 - (collapsedCount * 10);\n\n    // Update the idealWidth of each column based on its collapsed state\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.collapsed) {\n          // There must be one column always expanded.\n\n          if (remainingColumns) {\n            col.idealWidth = 10;\n          } else {\n            if (col.id === column.id) {\n              col.idealWidth = 100 - ((totalColumns - 1) * 10);\n              col.collapsed = false;\n            }\n          }\n        } else {\n          col.idealWidth = remainingWidth / remainingColumns;\n        }\n      });\n    });\n  }\n\n  toggleCollapseForWorkFlow(column: any, columnNumber: number) {\n    const collapsedColumns = this.tableHeaders.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.tableHeaders.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    debugger\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LibraryItem",
            "id": "interface-LibraryItem-0732486714dede1250ced5fe0375703b148187c973424cc298c1468be377fc63c38e14c67b88d9bbc6f2fc804a2cbbbd0b422bc98886c4a9052dc96fa440ceb3",
            "file": "projects/ui/src/lib/kanban/kanban.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, QueryList, ViewChildren } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ColumnNamesPipe } from './column-names.pipe';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\ninterface LibraryItem {\n  type: 'link' | 'chip' | 'budget' | 'timeFrame' | 'avatar' | string; // Types for different items\n  label?: string; // Label for the item (optional depending on type)\n  value?: string | string[] | { value?: string; backgroundColor?: string; foregroundColor?: string; }[]; // Value for the item (optional depending on type)\n  url?: string; // URL for links (optional depending on type)\n  currency?: string; // Currency for budget (optional depending on type)\n  amount?: number; // Amount for budget (optional depending on type)\n  reference?: string; // Reference for links (optional depending on type)\n  author?: { // Author details (optional depending on type)\n    photo?: string;\n    name?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  header: LibraryItem[];\n  body: {\n    description: string;\n  };\n  footer: LibraryItem[];\n  borderColor?: string;\n  toggleColumn?: boolean;\n}\n\ninterface Column {\n  id: number;\n  heading: string;\n  tasks: Task[];\n  collapsed?: boolean;\n  action?: {\n    label: string;\n    event: ($event: any, column: Column) => void;\n  };\n}\n\ninterface Swimlane {\n  id: number;\n  heading: string;\n  columns: Column[];\n}\n\ntype KanbanData = Column[] | Swimlane[] | any[];\n\n@Component({\n  selector: 'shorterloop-kanban',\n  standalone: true,\n  imports: [CommonModule, DragDropModule, MatIconModule, MatExpansionModule, ColumnNamesPipe],\n  templateUrl: './kanban.component.html',\n  styleUrls: ['./kanban.component.css'],\n})\nexport class KanbanComponent implements AfterViewInit {\n  @Input() data: KanbanData = [];\n  @Input() type = '';\n  @Input() tableHeaders: any = [];\n\n  @ViewChildren('kanbanList') kanbanLists!: QueryList<ElementRef>;\n\n  constructor(public sanitizer: DomSanitizer) { }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    setTimeout((_: any) => {\n      this.adjustColumnHeights(event.container.id);\n      this.adjustColumnHeights(event.previousContainer.id);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.adjustColumnHeights();\n    // this.setupMutationObserver();\n  }\n\n  private adjustColumnHeights(only = '') {\n    let listing: any = this.kanbanLists;\n\n    if (only) {\n      const swimlane: any = document.querySelector('#' + only);\n      const swimlaneRow = swimlane.getAttribute('customId');\n      //@ts-ignore\n      listing = this.kanbanLists._results.filter((list: any) => list.nativeElement.getAttribute('customId') === swimlaneRow)\n    }\n    if (listing) {\n      const columnHeights: any = listing.map((list: any) => {\n        const children = Array.from(list.nativeElement.children);\n        const totalHeight = children.reduce((height: any, child: any) => {\n          const childStyles = window.getComputedStyle(child);\n          const marginBottom = parseFloat(childStyles.marginBottom);\n          const paddingBottom = parseFloat(childStyles.paddingBottom);\n          return height + child.offsetHeight + marginBottom + paddingBottom;\n        }, 0);\n        return totalHeight;\n      });\n\n      const maxHeight = Math.max(...columnHeights);\n      listing.forEach((list: any) => {\n        (list.nativeElement as HTMLElement).style.height = `${maxHeight}px`;\n      });\n    }\n  }\n\n  addAction($event: any, column: Column) {\n    column.action?.event($event, column);\n  }\n\n  toggleCollapse(column: Column) {\n    const collapsedColumns = this.data.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.data.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n\n  toggleCollapseSwimlane(column: any) {\n    // Toggle the collapsed state of the specified column\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.id === column.id) {\n          col.collapsed = !col.collapsed;\n        }\n      });\n    });\n\n    // Calculate the number of collapsed columns and the remaining width\n    // @ts-ignore\n    const totalColumns = this.data[0].columns.length;\n    let collapsedColumns = this.data.flatMap((swimlane: any) => swimlane.columns).filter((col: any) => col.collapsed);\n    // Filter out duplicates by id\n    collapsedColumns = collapsedColumns.reduce((acc, current) => {\n      const x = acc.find((item: any) => item.id === current.id);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    const remainingWidth = 100 - (collapsedCount * 10);\n\n    // Update the idealWidth of each column based on its collapsed state\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.collapsed) {\n          // There must be one column always expanded.\n\n          if (remainingColumns) {\n            col.idealWidth = 10;\n          } else {\n            if (col.id === column.id) {\n              col.idealWidth = 100 - ((totalColumns - 1) * 10);\n              col.collapsed = false;\n            }\n          }\n        } else {\n          col.idealWidth = remainingWidth / remainingColumns;\n        }\n      });\n    });\n  }\n\n  toggleCollapseForWorkFlow(column: any, columnNumber: number) {\n    const collapsedColumns = this.tableHeaders.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.tableHeaders.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    debugger\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "reference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"link\" | \"chip\" | \"budget\" | \"timeFrame\" | \"avatar\" | string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[] | literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Swimlane",
            "id": "interface-Swimlane-0732486714dede1250ced5fe0375703b148187c973424cc298c1468be377fc63c38e14c67b88d9bbc6f2fc804a2cbbbd0b422bc98886c4a9052dc96fa440ceb3",
            "file": "projects/ui/src/lib/kanban/kanban.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, QueryList, ViewChildren } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ColumnNamesPipe } from './column-names.pipe';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\ninterface LibraryItem {\n  type: 'link' | 'chip' | 'budget' | 'timeFrame' | 'avatar' | string; // Types for different items\n  label?: string; // Label for the item (optional depending on type)\n  value?: string | string[] | { value?: string; backgroundColor?: string; foregroundColor?: string; }[]; // Value for the item (optional depending on type)\n  url?: string; // URL for links (optional depending on type)\n  currency?: string; // Currency for budget (optional depending on type)\n  amount?: number; // Amount for budget (optional depending on type)\n  reference?: string; // Reference for links (optional depending on type)\n  author?: { // Author details (optional depending on type)\n    photo?: string;\n    name?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  header: LibraryItem[];\n  body: {\n    description: string;\n  };\n  footer: LibraryItem[];\n  borderColor?: string;\n  toggleColumn?: boolean;\n}\n\ninterface Column {\n  id: number;\n  heading: string;\n  tasks: Task[];\n  collapsed?: boolean;\n  action?: {\n    label: string;\n    event: ($event: any, column: Column) => void;\n  };\n}\n\ninterface Swimlane {\n  id: number;\n  heading: string;\n  columns: Column[];\n}\n\ntype KanbanData = Column[] | Swimlane[] | any[];\n\n@Component({\n  selector: 'shorterloop-kanban',\n  standalone: true,\n  imports: [CommonModule, DragDropModule, MatIconModule, MatExpansionModule, ColumnNamesPipe],\n  templateUrl: './kanban.component.html',\n  styleUrls: ['./kanban.component.css'],\n})\nexport class KanbanComponent implements AfterViewInit {\n  @Input() data: KanbanData = [];\n  @Input() type = '';\n  @Input() tableHeaders: any = [];\n\n  @ViewChildren('kanbanList') kanbanLists!: QueryList<ElementRef>;\n\n  constructor(public sanitizer: DomSanitizer) { }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    setTimeout((_: any) => {\n      this.adjustColumnHeights(event.container.id);\n      this.adjustColumnHeights(event.previousContainer.id);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.adjustColumnHeights();\n    // this.setupMutationObserver();\n  }\n\n  private adjustColumnHeights(only = '') {\n    let listing: any = this.kanbanLists;\n\n    if (only) {\n      const swimlane: any = document.querySelector('#' + only);\n      const swimlaneRow = swimlane.getAttribute('customId');\n      //@ts-ignore\n      listing = this.kanbanLists._results.filter((list: any) => list.nativeElement.getAttribute('customId') === swimlaneRow)\n    }\n    if (listing) {\n      const columnHeights: any = listing.map((list: any) => {\n        const children = Array.from(list.nativeElement.children);\n        const totalHeight = children.reduce((height: any, child: any) => {\n          const childStyles = window.getComputedStyle(child);\n          const marginBottom = parseFloat(childStyles.marginBottom);\n          const paddingBottom = parseFloat(childStyles.paddingBottom);\n          return height + child.offsetHeight + marginBottom + paddingBottom;\n        }, 0);\n        return totalHeight;\n      });\n\n      const maxHeight = Math.max(...columnHeights);\n      listing.forEach((list: any) => {\n        (list.nativeElement as HTMLElement).style.height = `${maxHeight}px`;\n      });\n    }\n  }\n\n  addAction($event: any, column: Column) {\n    column.action?.event($event, column);\n  }\n\n  toggleCollapse(column: Column) {\n    const collapsedColumns = this.data.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.data.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n\n  toggleCollapseSwimlane(column: any) {\n    // Toggle the collapsed state of the specified column\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.id === column.id) {\n          col.collapsed = !col.collapsed;\n        }\n      });\n    });\n\n    // Calculate the number of collapsed columns and the remaining width\n    // @ts-ignore\n    const totalColumns = this.data[0].columns.length;\n    let collapsedColumns = this.data.flatMap((swimlane: any) => swimlane.columns).filter((col: any) => col.collapsed);\n    // Filter out duplicates by id\n    collapsedColumns = collapsedColumns.reduce((acc, current) => {\n      const x = acc.find((item: any) => item.id === current.id);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    const remainingWidth = 100 - (collapsedCount * 10);\n\n    // Update the idealWidth of each column based on its collapsed state\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.collapsed) {\n          // There must be one column always expanded.\n\n          if (remainingColumns) {\n            col.idealWidth = 10;\n          } else {\n            if (col.id === column.id) {\n              col.idealWidth = 100 - ((totalColumns - 1) * 10);\n              col.collapsed = false;\n            }\n          }\n        } else {\n          col.idealWidth = remainingWidth / remainingColumns;\n        }\n      });\n    });\n  }\n\n  toggleCollapseForWorkFlow(column: any, columnNumber: number) {\n    const collapsedColumns = this.tableHeaders.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.tableHeaders.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    debugger\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-0732486714dede1250ced5fe0375703b148187c973424cc298c1468be377fc63c38e14c67b88d9bbc6f2fc804a2cbbbd0b422bc98886c4a9052dc96fa440ceb3",
            "file": "projects/ui/src/lib/kanban/kanban.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, QueryList, ViewChildren } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ColumnNamesPipe } from './column-names.pipe';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\ninterface LibraryItem {\n  type: 'link' | 'chip' | 'budget' | 'timeFrame' | 'avatar' | string; // Types for different items\n  label?: string; // Label for the item (optional depending on type)\n  value?: string | string[] | { value?: string; backgroundColor?: string; foregroundColor?: string; }[]; // Value for the item (optional depending on type)\n  url?: string; // URL for links (optional depending on type)\n  currency?: string; // Currency for budget (optional depending on type)\n  amount?: number; // Amount for budget (optional depending on type)\n  reference?: string; // Reference for links (optional depending on type)\n  author?: { // Author details (optional depending on type)\n    photo?: string;\n    name?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  header: LibraryItem[];\n  body: {\n    description: string;\n  };\n  footer: LibraryItem[];\n  borderColor?: string;\n  toggleColumn?: boolean;\n}\n\ninterface Column {\n  id: number;\n  heading: string;\n  tasks: Task[];\n  collapsed?: boolean;\n  action?: {\n    label: string;\n    event: ($event: any, column: Column) => void;\n  };\n}\n\ninterface Swimlane {\n  id: number;\n  heading: string;\n  columns: Column[];\n}\n\ntype KanbanData = Column[] | Swimlane[] | any[];\n\n@Component({\n  selector: 'shorterloop-kanban',\n  standalone: true,\n  imports: [CommonModule, DragDropModule, MatIconModule, MatExpansionModule, ColumnNamesPipe],\n  templateUrl: './kanban.component.html',\n  styleUrls: ['./kanban.component.css'],\n})\nexport class KanbanComponent implements AfterViewInit {\n  @Input() data: KanbanData = [];\n  @Input() type = '';\n  @Input() tableHeaders: any = [];\n\n  @ViewChildren('kanbanList') kanbanLists!: QueryList<ElementRef>;\n\n  constructor(public sanitizer: DomSanitizer) { }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    setTimeout((_: any) => {\n      this.adjustColumnHeights(event.container.id);\n      this.adjustColumnHeights(event.previousContainer.id);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.adjustColumnHeights();\n    // this.setupMutationObserver();\n  }\n\n  private adjustColumnHeights(only = '') {\n    let listing: any = this.kanbanLists;\n\n    if (only) {\n      const swimlane: any = document.querySelector('#' + only);\n      const swimlaneRow = swimlane.getAttribute('customId');\n      //@ts-ignore\n      listing = this.kanbanLists._results.filter((list: any) => list.nativeElement.getAttribute('customId') === swimlaneRow)\n    }\n    if (listing) {\n      const columnHeights: any = listing.map((list: any) => {\n        const children = Array.from(list.nativeElement.children);\n        const totalHeight = children.reduce((height: any, child: any) => {\n          const childStyles = window.getComputedStyle(child);\n          const marginBottom = parseFloat(childStyles.marginBottom);\n          const paddingBottom = parseFloat(childStyles.paddingBottom);\n          return height + child.offsetHeight + marginBottom + paddingBottom;\n        }, 0);\n        return totalHeight;\n      });\n\n      const maxHeight = Math.max(...columnHeights);\n      listing.forEach((list: any) => {\n        (list.nativeElement as HTMLElement).style.height = `${maxHeight}px`;\n      });\n    }\n  }\n\n  addAction($event: any, column: Column) {\n    column.action?.event($event, column);\n  }\n\n  toggleCollapse(column: Column) {\n    const collapsedColumns = this.data.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.data.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n\n  toggleCollapseSwimlane(column: any) {\n    // Toggle the collapsed state of the specified column\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.id === column.id) {\n          col.collapsed = !col.collapsed;\n        }\n      });\n    });\n\n    // Calculate the number of collapsed columns and the remaining width\n    // @ts-ignore\n    const totalColumns = this.data[0].columns.length;\n    let collapsedColumns = this.data.flatMap((swimlane: any) => swimlane.columns).filter((col: any) => col.collapsed);\n    // Filter out duplicates by id\n    collapsedColumns = collapsedColumns.reduce((acc, current) => {\n      const x = acc.find((item: any) => item.id === current.id);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    const remainingWidth = 100 - (collapsedCount * 10);\n\n    // Update the idealWidth of each column based on its collapsed state\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.collapsed) {\n          // There must be one column always expanded.\n\n          if (remainingColumns) {\n            col.idealWidth = 10;\n          } else {\n            if (col.id === column.id) {\n              col.idealWidth = 100 - ((totalColumns - 1) * 10);\n              col.collapsed = false;\n            }\n          }\n        } else {\n          col.idealWidth = remainingWidth / remainingColumns;\n        }\n      });\n    });\n  }\n\n  toggleCollapseForWorkFlow(column: any, columnNumber: number) {\n    const collapsedColumns = this.tableHeaders.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.tableHeaders.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    debugger\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LibraryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LibraryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "toggleColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-dda6ea28903b44daf30a46ce4a91fef2379a01605a8f01db0b932b6537b85d5843b06c7faccdc818d5dd012059e1b83bb4a32c3784df2709ee02cddb9888fdbe",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'shui'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'shui';\n}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n<style>\n  :host {\n    --bright-blue: oklch(51.01% 0.274 263.83);\n    --electric-violet: oklch(53.18% 0.28 296.97);\n    --french-violet: oklch(47.66% 0.246 305.88);\n    --vivid-pink: oklch(69.02% 0.277 332.77);\n    --hot-red: oklch(61.42% 0.238 15.34);\n    --orange-red: oklch(63.32% 0.24 31.68);\n\n    --gray-900: oklch(19.37% 0.006 300.98);\n    --gray-700: oklch(36.98% 0.014 302.71);\n    --gray-400: oklch(70.9% 0.015 304.04);\n\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\n      180deg,\n      var(--orange-red) 0%,\n      var(--vivid-pink) 50%,\n      var(--electric-violet) 100%\n    );\n\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\n      90deg,\n      var(--orange-red) 0%,\n      var(--vivid-pink) 50%,\n      var(--electric-violet) 100%\n    );\n\n    --pill-accent: var(--bright-blue);\n\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\";\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  h1 {\n    font-size: 3.125rem;\n    color: var(--gray-900);\n    font-weight: 500;\n    line-height: 100%;\n    letter-spacing: -0.125rem;\n    margin: 0;\n    font-family: \"Inter Tight\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\";\n  }\n\n  p {\n    margin: 0;\n    color: var(--gray-700);\n  }\n\n  main {\n    width: 100%;\n    min-height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    box-sizing: inherit;\n    position: relative;\n  }\n\n  .angular-logo {\n    max-width: 9.2rem;\n  }\n\n  .content {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    max-width: 700px;\n    margin-bottom: 3rem;\n  }\n\n  .content h1 {\n    margin-top: 1.75rem;\n  }\n\n  .content p {\n    margin-top: 1.5rem;\n  }\n\n  .divider {\n    width: 1px;\n    background: var(--red-to-pink-to-purple-vertical-gradient);\n    margin-inline: 0.5rem;\n  }\n\n  .pill-group {\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n    flex-wrap: wrap;\n    gap: 1.25rem;\n  }\n\n  .pill {\n    display: flex;\n    align-items: center;\n    --pill-accent: var(--bright-blue);\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\n    color: var(--pill-accent);\n    padding-inline: 0.75rem;\n    padding-block: 0.375rem;\n    border-radius: 2.75rem;\n    border: 0;\n    transition: background 0.3s ease;\n    font-family: var(--inter-font);\n    font-size: 0.875rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 1.4rem;\n    letter-spacing: -0.00875rem;\n    text-decoration: none;\n  }\n\n  .pill:hover {\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\n  }\n\n  .pill-group .pill:nth-child(6n + 1) {\n    --pill-accent: var(--bright-blue);\n  }\n  .pill-group .pill:nth-child(6n + 2) {\n    --pill-accent: var(--french-violet);\n  }\n  .pill-group .pill:nth-child(6n + 3),\n  .pill-group .pill:nth-child(6n + 4),\n  .pill-group .pill:nth-child(6n + 5) {\n    --pill-accent: var(--hot-red);\n  }\n\n  .pill-group svg {\n    margin-inline-start: 0.25rem;\n  }\n\n  .social-links {\n    display: flex;\n    align-items: center;\n    gap: 0.73rem;\n    margin-top: 1.5rem;\n  }\n\n  .social-links path {\n    transition: fill 0.3s ease;\n    fill: var(--gray-400);\n  }\n\n  .social-links a:hover svg path {\n    fill: var(--gray-900);\n  }\n\n  @media screen and (max-width: 650px) {\n    .content {\n      flex-direction: column;\n      width: max-content;\n    }\n\n    .divider {\n      height: 1px;\n      width: 100%;\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\n      margin-block: 1.5rem;\n    }\n  }\n</style>\n\n<main class=\"main\">\n  <div class=\"content\">\n    <div class=\"left-side\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 982 239\"\n        fill=\"none\"\n        class=\"angular-logo\"\n      >\n        <g clip-path=\"url(#a)\">\n          <path\n            fill=\"url(#b)\"\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\n          />\n          <path\n            fill=\"url(#c)\"\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\n          />\n        </g>\n        <defs>\n          <radialGradient\n            id=\"c\"\n            cx=\"0\"\n            cy=\"0\"\n            r=\"1\"\n            gradientTransform=\"rotate(118.122 171.182 60.81) scale(205.794)\"\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stop-color=\"#FF41F8\" />\n            <stop offset=\".707\" stop-color=\"#FF41F8\" stop-opacity=\".5\" />\n            <stop offset=\"1\" stop-color=\"#FF41F8\" stop-opacity=\"0\" />\n          </radialGradient>\n          <linearGradient\n            id=\"b\"\n            x1=\"0\"\n            x2=\"982\"\n            y1=\"192\"\n            y2=\"192\"\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stop-color=\"#F0060B\" />\n            <stop offset=\"0\" stop-color=\"#F0070C\" />\n            <stop offset=\".526\" stop-color=\"#CC26D5\" />\n            <stop offset=\"1\" stop-color=\"#7702FF\" />\n          </linearGradient>\n          <clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h982v239H0z\" /></clipPath>\n        </defs>\n      </svg>\n      <h1>Hello, {{ title }}</h1>\n      <p>Congratulations! Your app is running. 🎉</p>\n    </div>\n    <div class=\"divider\" role=\"separator\" aria-label=\"Divider\"></div>\n    <div class=\"right-side\">\n      <div class=\"pill-group\">\n        @for (item of [\n          { title: 'Explore the Docs', link: 'https://angular.dev' },\n          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },\n          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },\n          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },\n          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },\n        ]; track item.title) {\n          <a\n            class=\"pill\"\n            [href]=\"item.link\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            <span>{{ item.title }}</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              height=\"14\"\n              viewBox=\"0 -960 960 960\"\n              width=\"14\"\n              fill=\"currentColor\"\n            >\n              <path\n                d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z\"\n              />\n            </svg>\n          </a>\n        }\n      </div>\n      <div class=\"social-links\">\n        <a\n          href=\"https://github.com/angular/angular\"\n          aria-label=\"Github\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"25\"\n            height=\"24\"\n            viewBox=\"0 0 25 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Github\"\n          >\n            <path\n              d=\"M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z\"\n            />\n          </svg>\n        </a>\n        <a\n          href=\"https://twitter.com/angular\"\n          aria-label=\"Twitter\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Twitter\"\n          >\n            <path\n              d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"\n            />\n          </svg>\n        </a>\n        <a\n          href=\"https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw\"\n          aria-label=\"Youtube\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"29\"\n            height=\"20\"\n            viewBox=\"0 0 29 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Youtube\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z\"\n            />\n          </svg>\n        </a>\n      </div>\n    </div>\n  </div>\n</main>\n\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n\n<router-outlet />\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "KanbanComponent",
            "id": "component-KanbanComponent-0732486714dede1250ced5fe0375703b148187c973424cc298c1468be377fc63c38e14c67b88d9bbc6f2fc804a2cbbbd0b422bc98886c4a9052dc96fa440ceb3",
            "file": "projects/ui/src/lib/kanban/kanban.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "shorterloop-kanban",
            "styleUrls": [
                "./kanban.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./kanban.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "KanbanData",
                    "decorators": []
                },
                {
                    "name": "tableHeaders",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "kanbanLists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'kanbanList'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sanitizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addAction",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adjustColumnHeights",
                    "args": [
                        {
                            "name": "only",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "only",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Task[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Task[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCollapse",
                    "args": [
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapseForWorkFlow",
                    "args": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapseSwimlane",
                    "args": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "ColumnNamesPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, QueryList, ViewChildren } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { ColumnNamesPipe } from './column-names.pipe';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\ninterface LibraryItem {\n  type: 'link' | 'chip' | 'budget' | 'timeFrame' | 'avatar' | string; // Types for different items\n  label?: string; // Label for the item (optional depending on type)\n  value?: string | string[] | { value?: string; backgroundColor?: string; foregroundColor?: string; }[]; // Value for the item (optional depending on type)\n  url?: string; // URL for links (optional depending on type)\n  currency?: string; // Currency for budget (optional depending on type)\n  amount?: number; // Amount for budget (optional depending on type)\n  reference?: string; // Reference for links (optional depending on type)\n  author?: { // Author details (optional depending on type)\n    photo?: string;\n    name?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  header: LibraryItem[];\n  body: {\n    description: string;\n  };\n  footer: LibraryItem[];\n  borderColor?: string;\n  toggleColumn?: boolean;\n}\n\ninterface Column {\n  id: number;\n  heading: string;\n  tasks: Task[];\n  collapsed?: boolean;\n  action?: {\n    label: string;\n    event: ($event: any, column: Column) => void;\n  };\n}\n\ninterface Swimlane {\n  id: number;\n  heading: string;\n  columns: Column[];\n}\n\ntype KanbanData = Column[] | Swimlane[] | any[];\n\n@Component({\n  selector: 'shorterloop-kanban',\n  standalone: true,\n  imports: [CommonModule, DragDropModule, MatIconModule, MatExpansionModule, ColumnNamesPipe],\n  templateUrl: './kanban.component.html',\n  styleUrls: ['./kanban.component.css'],\n})\nexport class KanbanComponent implements AfterViewInit {\n  @Input() data: KanbanData = [];\n  @Input() type = '';\n  @Input() tableHeaders: any = [];\n\n  @ViewChildren('kanbanList') kanbanLists!: QueryList<ElementRef>;\n\n  constructor(public sanitizer: DomSanitizer) { }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    setTimeout((_: any) => {\n      this.adjustColumnHeights(event.container.id);\n      this.adjustColumnHeights(event.previousContainer.id);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.adjustColumnHeights();\n    // this.setupMutationObserver();\n  }\n\n  private adjustColumnHeights(only = '') {\n    let listing: any = this.kanbanLists;\n\n    if (only) {\n      const swimlane: any = document.querySelector('#' + only);\n      const swimlaneRow = swimlane.getAttribute('customId');\n      //@ts-ignore\n      listing = this.kanbanLists._results.filter((list: any) => list.nativeElement.getAttribute('customId') === swimlaneRow)\n    }\n    if (listing) {\n      const columnHeights: any = listing.map((list: any) => {\n        const children = Array.from(list.nativeElement.children);\n        const totalHeight = children.reduce((height: any, child: any) => {\n          const childStyles = window.getComputedStyle(child);\n          const marginBottom = parseFloat(childStyles.marginBottom);\n          const paddingBottom = parseFloat(childStyles.paddingBottom);\n          return height + child.offsetHeight + marginBottom + paddingBottom;\n        }, 0);\n        return totalHeight;\n      });\n\n      const maxHeight = Math.max(...columnHeights);\n      listing.forEach((list: any) => {\n        (list.nativeElement as HTMLElement).style.height = `${maxHeight}px`;\n      });\n    }\n  }\n\n  addAction($event: any, column: Column) {\n    column.action?.event($event, column);\n  }\n\n  toggleCollapse(column: Column) {\n    const collapsedColumns = this.data.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.data.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n\n  toggleCollapseSwimlane(column: any) {\n    // Toggle the collapsed state of the specified column\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.id === column.id) {\n          col.collapsed = !col.collapsed;\n        }\n      });\n    });\n\n    // Calculate the number of collapsed columns and the remaining width\n    // @ts-ignore\n    const totalColumns = this.data[0].columns.length;\n    let collapsedColumns = this.data.flatMap((swimlane: any) => swimlane.columns).filter((col: any) => col.collapsed);\n    // Filter out duplicates by id\n    collapsedColumns = collapsedColumns.reduce((acc, current) => {\n      const x = acc.find((item: any) => item.id === current.id);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    const remainingWidth = 100 - (collapsedCount * 10);\n\n    // Update the idealWidth of each column based on its collapsed state\n    this.data.forEach((swimlane: any) => {\n      swimlane.columns.forEach((col: any) => {\n        if (col.collapsed) {\n          // There must be one column always expanded.\n\n          if (remainingColumns) {\n            col.idealWidth = 10;\n          } else {\n            if (col.id === column.id) {\n              col.idealWidth = 100 - ((totalColumns - 1) * 10);\n              col.collapsed = false;\n            }\n          }\n        } else {\n          col.idealWidth = remainingWidth / remainingColumns;\n        }\n      });\n    });\n  }\n\n  toggleCollapseForWorkFlow(column: any, columnNumber: number) {\n    const collapsedColumns = this.tableHeaders.filter((col: any) => col.collapsed);\n\n    const totalColumns = this.tableHeaders.length;\n    const collapsedCount = collapsedColumns.length;\n    const remainingColumns = totalColumns - collapsedCount;\n    debugger\n    if ((remainingColumns > 1 && !column.collapsed) || (remainingColumns >= 1 && column.collapsed)) {\n      column.collapsed = !column.collapsed;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  font-family: system-ui;\n  margin: 0;\n  padding: 0;\n}\n\n.kanban-board {\n  display: flex;\n}\n\n.kanban_board_collapsed {\n  gap: 10px;\n}\n\n.kanban-column {\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  overflow: hidden;\n  border-right: none;\n  /* border-bottom: none; */\n}\n\n.kanban-column:last-child {\n  border-right: 1px solid #e0e0e0;\n}\n\n.kanban-column:hover .kanban-column-action {\n  visibility: visible;\n}\n\nh2 {\n  /* border-bottom: 1px solid #e0e0e0; */\n  border-right: none;\n  margin: 0;\n  padding: 16px 0 16px 16px;\n  background-color: #ffffff;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n}\n\n/*\n.kanban-column:last-child h2 {\n  border-right: 1px solid #e0e0e0;\n} */\n\n.kanban-column-data {\n  padding: 16px;\n  border-top: 1px solid #e0e0e0;\n  /* border-bottom: none !important;\n  border-right: none !important;\n  border-left: none !important; */\n}\n\n.kanban-column-data:first-child {\n  border-left: none !important;\n  border-right: none !important;\n  border-bottom: none !important;\n}\n\n.kanban-column-data:not(:last-child) {\n  border-right: none !important;\n  border-bottom: none !important;\n}\n\n/*\n.kanban-column:last-child .kanban-column-data {\n  border-right: 1px solid #e0e0e0;\n} */\n\n.kanban-column.collapsed .kanban-column-data {\n  display: none;\n  /* Hide the column data when collapsed */\n}\n\n.kanban-column:nth-child(odd) {\n  background-color: #f8f6ff;\n}\n\n.kanban-list {\n  min-height: 200px;\n  height: 100%;\n}\n\n.kanban-item {\n  position: relative;\n  justify-content: space-between;\n  padding: 10px 8px;\n  min-height: 41px;\n  background: #fff;\n  border-radius: 4px;\n  border: 1px solid #e0e0e0;\n  margin-bottom: 10px;\n  font-size: 14px;\n}\n\n.cdk-drag.kanban-item {\n  cursor: grab;\n}\n\n.cdk-drag.kanban-item:active,\n.kanban-board:active {\n  cursor: grabbing;\n}\n\n.icon_center {\n  justify-content: center !important;\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.link {\n  margin-right: 3px;\n}\n\n.link a {\n  font-style: normal;\n  font-weight: 700;\n  line-height: 140%;\n  text-transform: capitalize;\n  text-decoration: none;\n  white-space: nowrap;\n  max-width: fit-content;\n  color: #573df4;\n  float: left;\n  margin-right: 5px;\n  min-width: fit-content;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.chip-container {\n  color: #ffffff;\n  margin-right: 5px;\n}\n\n.chip-container .chip {\n  color: #fff;\n  text-align: center;\n  font-size: 10px;\n  margin-right: 5px;\n  padding: 4px 8px;\n  border-radius: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  text-transform: uppercase;\n}\n\n.task-body {\n  color: #323232;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n  min-height: 40px;\n  margin: 14px 0;\n}\n\n.task-footer {\n  display: flex;\n  gap: 3px;\n  align-items: center;\n  font-size: 11px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 130%;\n  color: #230f9f;\n}\n\n.task-footer div:not(:last-child)::after {\n  content: '·';\n  margin-right: 5px;\n  font-size: 12px;\n}\n\n.avatar {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.avatar img {\n  width: 21px;\n  height: 21px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.kanban-column-action {\n  visibility: hidden;\n  font-style: normal;\n  line-height: 140%;\n  text-transform: uppercase;\n  text-decoration: none;\n  white-space: nowrap;\n  max-width: fit-content;\n  color: #573df4;\n  float: left;\n  margin-right: 5px;\n  min-width: fit-content;\n  font-size: 14px;\n  margin-bottom: 20px;\n  cursor: pointer;\n  display: block;\n}\n\n.expand-icon {\n  cursor: pointer;\n  margin-right: 5px;\n  font-size: 18px;\n  flex: 1;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.expand-icon svg {\n  width: 18px;\n  border: 1px solid transparent;\n  height: 18px;\n  padding: 5px;\n}\n\n.expand-icon svg:hover {\n  background: #f0f0f0;\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-radius: 4px;\n  box-shadow: none;\n  color: #0f6cbd;\n}\n\n.vertical-writing {\n  color: #616161;\n  font-size: 12px;\n  font-weight: 600;\n  overflow: hidden;\n  padding: 12px;\n  position: relative;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  -ms-writing-mode: tb-lr;\n  writing-mode: vertical-lr;\n  left: 25%;\n}\n\n.swimlane-section {\n  border-left: 1px solid #e0e0e0;\n  border-right: 1px solid #e0e0e0;\n  border-bottom: 1px solid #e0e0e0;\n}\n\nsummary {\n  padding: 16px;\n  background-color: #FAFAFA;\n  cursor: pointer;\n}\n\ndetails:not(:first-child) {\n  border-top: 1px solid #e0e0e0;\n}\n\n.swimlane-section .kanban-column-data {\n  border: 1px solid #e0e0e0;\n  /* border-left: none; */\n}\n\n.swimlane-section .kanban-column-data:last-child {\n  border-right: none;\n  border-bottom: none;\n}\n\n.padding_0 {\n  padding: 0;\n}\n\n.padding_0:first-child {\n  border: 1px solid #e0e0e0 !important;\n  border-bottom: none !important;\n  border-right: none !important;\n  border-left: none !important;\n}\n\n.padding_0:last-child {\n  border: 1px solid #e0e0e0 !important;\n}\n\nh2.collapsed {\n  padding-left: 0 !important;\n}\n\nh2:not(.collapsed) {\n  padding-right: 16px !important;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\nth {\n  background-color: #ffffff;\n  padding: 0;\n}\n\nth,\nth,\ntd {\n  border: 1px solid #e0e0e0;\n  padding: 16px;\n  text-align: left;\n}\n\ntd {\n  vertical-align: top;\n}\n\n.swimlane-section .kanban-column-data:nth-child(odd) {\n  background-color: #f8f6ff;\n}\n\n.odd-section {\n  background-color: #f8f6ff;\n}\n\n.workflow-kanban-action a {\n  font-style: normal;\n  line-height: 140%;\n  text-transform: capitalize;\n  text-decoration: none;\n  white-space: nowrap;\n  max-width: fit-content;\n  color: #573df4;\n  float: left;\n  margin-right: 5px;\n  min-width: fit-content;\n  font-size: 14px;\n  cursor: pointer;\n  float: right;\n}\n\n.d-flex {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}",
                    "styleUrl": "./kanban.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- kanban.component.html -->\n<div class=\"kanban-board\" cdkDropListGroup *ngIf=\"!type\">\n  <ng-container *ngFor=\"let column of data\">\n    <div [style.width.%]=\"!column?.collapsed? (100 / data.length): 10\" class=\"kanban-column\">\n      <div class=\"kanban-column-header\">\n        <h2 [class.collapsed]=\"column?.collapsed\">\n          <span *ngIf=\"!column?.collapsed\">{{ column.heading }}</span>\n\n          <span class=\"expand-icon\" *ngIf=\"column?.toggleColumn\" [class.icon_center]=\"column?.collapsed\"\n            (click)=\"toggleCollapse(column)\">\n            <!-- Custom symbols for expand and collapse -->\n            <ng-container *ngIf=\"!column?.collapsed; else collapsedIcon\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"\n                fill=\"#5f6368\">\n                <path d=\"M400-80 0-480l400-400 71 71-329 329 329 329-71 71Z\" />\n              </svg>\n            </ng-container>\n            <ng-template #collapsedIcon>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"\n                fill=\"#5f6368\">\n                <path d=\"m321-80-71-71 329-329-329-329 71-71 400 400L321-80Z\" />\n              </svg>\n            </ng-template>\n          </span>\n        </h2>\n      </div>\n\n      <div class=\"kanban-column-data\">\n        <div *ngIf=\"column?.collapsed\" class=\"vertical-writing\">\n          [{{column.tasks?.length}}] {{column.heading}}\n        </div>\n        <div cdkDropList [cdkDropListData]=\"column.tasks\" class=\"kanban-list\" #kanbanList\n          (cdkDropListDropped)=\"drop($event)\" *ngIf=\"!column?.collapsed\">\n          <div class=\"kanban-item\" *ngFor=\"let task of column.tasks\" cdkDrag\n            [style.borderTop]=\"task?.borderColor ? '3px solid ' + task?.borderColor : ''\">\n            <div class=\"task-card\">\n              <!-- Header -->\n              <div class=\"task-header\">\n                <ng-container *ngFor=\"let item of task.header\">\n                  <ng-container *ngIf=\"item.type === 'link'\">\n                    <span class=\"link\">\n                      <a [href]=\"item.url\">{{ item.label }}</a>\n                    </span>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.type === 'chip'\">\n                    <span class=\"chip-container\">\n                      <span *ngFor=\"let chip of item.value\" class=\"chip\" [style.backgroundColor]=\"chip?.backgroundColor\"\n                        [style.color]=\"chip?.foregroundColor\">{{\n                        chip?.value\n                        }}</span>\n                    </span>\n                  </ng-container>\n                  <!-- Add more header types as needed -->\n                </ng-container>\n              </div>\n\n              <!-- Body -->\n              <div class=\"task-body\">\n                <p>{{ task.body.description }}</p>\n              </div>\n\n              <!-- Footer -->\n              <div class=\"task-footer\">\n                <ng-container *ngFor=\"let item of task.footer\">\n                  <div class=\"avatar\" *ngIf=\"item.type === 'avatar'\">\n                    <img *ngIf=\"item?.photo\" [src]=\"item?.photo\" alt=\"{{ item.label }}\" />\n                    <span>{{ item.label }}</span>\n                  </div>\n                  <ng-container *ngIf=\"item.type === 'budget'\">\n                    <div>Budget: {{ item.value }}</div>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.type === 'timeFrame'\">\n                    <div>Time Frame: {{ item.value }}</div>\n                  </ng-container>\n                  <!-- Add more footer types as needed -->\n                </ng-container>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"kanban-column-action\" *ngIf=\"column?.action && !column?.collapsed\">\n          <a class=\"add-button\" (click)=\"addAction($event, column)\">{{ column?.action?.label }}</a>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<!-- Swimlane -->\n<ng-container *ngIf=\"type === 'swimlane'\">\n  <div class=\"kanban-board\">\n    <ng-container *ngFor=\"let column of data[0] | columnNames: data\">\n      <div [style.width.%]=\"column?.idealWidth\" class=\"kanban-column\">\n        <div class=\"kanban-column-header\">\n          <h2 [class.collapsed]=\"column?.collapsed\">\n            <span *ngIf=\"!column?.collapsed\">{{ column.heading }}</span>\n\n            <span class=\"expand-icon\" *ngIf=\"column?.toggleColumn\" [class.icon_center]=\"column?.collapsed\"\n              (click)=\"toggleCollapseSwimlane(column)\">\n              <!-- Custom symbols for expand and collapse -->\n              <ng-container *ngIf=\"!column?.collapsed; else collapsedIcon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"\n                  fill=\"#5f6368\">\n                  <path d=\"M400-80 0-480l400-400 71 71-329 329 329 329-71 71Z\" />\n                </svg>\n              </ng-container>\n              <ng-template #collapsedIcon>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"\n                  fill=\"#5f6368\">\n                  <path d=\"m321-80-71-71 329-329-329-329 71-71 400 400L321-80Z\" />\n                </svg>\n              </ng-template>\n            </span>\n          </h2>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <section cdkDropListGroup class=\"swimlane-section\">\n    <details open *ngFor=\"let column of data\">\n      <summary>{{ column?.heading }}</summary>\n\n      <div class=\"kanban-board\">\n        <div class=\"kanban-column-data\" *ngFor=\"let dataColumn of column.columns\"\n          [style.width.%]=\"dataColumn?.idealWidth\" [class.padding_0]=\"dataColumn?.collapsed\">\n          <div *ngIf=\"dataColumn?.collapsed\" class=\"vertical-writing\">\n            [{{dataColumn.tasks?.length}}] {{dataColumn.heading}}\n          </div>\n\n          <div cdkDropList [cdkDropListData]=\"dataColumn.tasks\" class=\"kanban-list\"\n            attr.customId=\"swimlane_row_{{column?.id}}\" #kanbanList (cdkDropListDropped)=\"drop($event)\"\n            *ngIf=\"!dataColumn?.collapsed\">\n            <div class=\"kanban-item\" *ngFor=\"let task of dataColumn.tasks\" cdkDrag\n              [style.borderTop]=\"task?.borderColor ? '3px solid ' + task?.borderColor : ''\">\n              <div class=\"task-card\">\n                <!-- Header -->\n                <div class=\"task-header\">\n                  <ng-container *ngFor=\"let item of task.header\">\n                    <ng-container *ngIf=\"item.type === 'link'\">\n                      <span class=\"link\">\n                        <a [href]=\"item.url\">{{ item.label }}</a>\n                      </span>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.type === 'chip'\">\n                      <span class=\"chip-container\">\n                        <span *ngFor=\"let chip of item.value\" class=\"chip\"\n                          [style.backgroundColor]=\"chip?.backgroundColor\" [style.color]=\"chip?.foregroundColor\">{{\n                          chip?.value\n                          }}</span>\n                      </span>\n                    </ng-container>\n                    <!-- Add more header types as needed -->\n                  </ng-container>\n                </div>\n\n                <!-- Body -->\n                <div class=\"task-body\">\n                  <p>{{ task.body.description }}</p>\n                </div>\n\n                <!-- Footer -->\n                <div class=\"task-footer\">\n                  <ng-container *ngFor=\"let item of task.footer\">\n                    <div class=\"avatar\" *ngIf=\"item.type === 'avatar'\">\n                      <img *ngIf=\"item?.photo\" [src]=\"item?.photo\" alt=\"{{ item.label }}\" />\n                      <span>{{ item.label }}</span>\n                    </div>\n                    <ng-container *ngIf=\"item.type === 'budget'\">\n                      <div>Budget: {{ item.value }}</div>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.type === 'timeFrame'\">\n                      <div>Time Frame: {{ item.value }}</div>\n                    </ng-container>\n                    <!-- Add more footer types as needed -->\n                  </ng-container>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"kanban-column-action\" *ngIf=\"column?.action && !column?.collapsed\">\n            <a class=\"add-button\" (click)=\"addAction($event, column)\">{{ column?.action?.label }}</a>\n          </div>\n        </div>\n      </div>\n    </details>\n  </section>\n</ng-container>\n\n<!-- Workflow  -->\n<ng-container *ngIf=\"type === 'workflow'\">\n  <table>\n    <thead>\n      <tr>\n        <th *ngFor=\"let th of tableHeaders; let i=index\" [style.width.%]=\"100 / tableHeaders.length\">\n          {{ th.label }}\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let opportunity of data; let i = index\">\n        <tr *ngFor=\"let solution of opportunity.solutions; let j = index\">\n          <ng-container *ngIf=\"j === 0\">\n            <td [attr.rowspan]=\"opportunity.solutions.length\" class=\"odd-section\">\n              <div class=\"kanban-item\"\n                [style.borderTop]=\"opportunity.opportunity?.borderColor ? '3px solid ' + opportunity.opportunity?.borderColor : ''\">\n                <div class=\"task-card\">\n                  <!-- Header -->\n                  <div class=\"task-header\" *ngIf=\"opportunity.opportunity.header\">\n                    <ng-container *ngFor=\"let item of opportunity.opportunity.header\">\n                      <ng-container *ngIf=\"item.type === 'link'\">\n                        <span class=\"link\">\n                          <a [href]=\"item.url\">{{ item.label }}</a>\n                        </span>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.type === 'chip'\">\n                        <span class=\"chip-container\">\n                          <span *ngFor=\"let chip of item.value\" class=\"chip\"\n                            [style.backgroundColor]=\"chip?.backgroundColor\" [style.color]=\"chip?.foregroundColor\">{{\n                            chip?.value\n                            }}</span>\n                        </span>\n                      </ng-container>\n                      <!-- Add more header types as needed -->\n                    </ng-container>\n                  </div>\n\n                  <!-- Body -->\n                  <div class=\"task-body\" *ngIf=\"opportunity.opportunity.body.description\">\n                    <p>{{ opportunity.opportunity.body.description }}</p>\n                  </div>\n\n                  <!-- Footer -->\n                  <div class=\"task-footer\" *ngIf=\"opportunity.opportunity.footer\">\n                    <ng-container *ngFor=\"let item of opportunity.opportunity.footer\">\n                      <div class=\"avatar\" *ngIf=\"item.type === 'avatar'\">\n                        <img *ngIf=\"item?.photo\" [src]=\"item?.photo\" alt=\"{{ item.label }}\" />\n                        <span>{{ item.label }}</span>\n                      </div>\n                      <ng-container *ngIf=\"item.type === 'budget'\">\n                        <div>Budget: {{ item.value }}</div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.type === 'timeFrame'\">\n                        <div>Time Frame: {{ item.value }}</div>\n                      </ng-container>\n                      <!-- Add more footer types as needed -->\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n              <div *ngIf=\"opportunity.opportunity?.action\" class=\"workflow-kanban-action\">\n                <a (click)=\"addAction($event, opportunity.opportunity)\" class=\"d-flex\">\n                  <span *ngIf=\"opportunity.opportunity?.action?.icon\"\n                    [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(opportunity.opportunity?.action?.icon)\"></span>\n\n                  <span>{{ opportunity.opportunity?.action?.label\n                    }}</span>\n                </a>\n              </div>\n            </td>\n          </ng-container>\n\n          <td>\n            <div class=\"kanban-item\"\n              [style.borderTop]=\"solution.solution?.borderColor ? '3px solid ' + solution.solution?.borderColor : ''\">\n              <div class=\"task-card\">\n                <!-- Header -->\n                <div class=\"task-header\" *ngIf=\"solution.solution.header\">\n                  <ng-container *ngFor=\"let item of solution.solution.header\">\n                    <ng-container *ngIf=\"item.type === 'link'\">\n                      <span class=\"link\">\n                        <a [href]=\"item.url\">{{ item.label }}</a>\n                      </span>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.type === 'chip'\">\n                      <span class=\"chip-container\">\n                        <span *ngFor=\"let chip of item.value\" class=\"chip\"\n                          [style.backgroundColor]=\"chip?.backgroundColor\" [style.color]=\"chip?.foregroundColor\">{{\n                          chip?.value\n                          }}</span>\n                      </span>\n                    </ng-container>\n                    <!-- Add more header types as needed -->\n                  </ng-container>\n                </div>\n\n                <!-- Body -->\n                <div class=\"task-body\" *ngIf=\"solution.solution.body.description\">\n                  <p>{{ solution.solution.body.description }}</p>\n                </div>\n\n                <!-- Footer -->\n                <div class=\"task-footer\" *ngIf=\"solution.solution.footer\">\n                  <ng-container *ngFor=\"let item of solution.solution.footer\">\n                    <div class=\"avatar\" *ngIf=\"item.type === 'avatar'\">\n                      <img *ngIf=\"item?.photo\" [src]=\"item?.photo\" alt=\"{{ item.label }}\" />\n                      <span>{{ item.label }}</span>\n                    </div>\n                    <ng-container *ngIf=\"item.type === 'budget'\">\n                      <div>Budget: {{ item.value }}</div>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.type === 'timeFrame'\">\n                      <div>Time Frame: {{ item.value }}</div>\n                    </ng-container>\n                    <!-- Add more footer types as needed -->\n                  </ng-container>\n                </div>\n              </div>\n            </div>\n            <div *ngIf=\"solution.solution?.action\" class=\"workflow-kanban-action\">\n              <a (click)=\"addAction($event, solution.solution)\" class=\"d-flex\">\n                <span *ngIf=\"solution.solution?.action?.icon\"\n                  [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(solution.solution?.action?.icon)\"></span>\n\n                <span>{{ solution.solution?.action?.label\n                  }}</span>\n              </a>\n            </div>\n          </td>\n\n          <td class=\"odd-section\" cdkDropListGroup cdkDropList [cdkDropListData]=\"solution.experiments\"\n            (cdkDropListDropped)=\"drop($event)\">\n            <ng-container *ngFor=\"let experiment of solution.experiments\" class=\"kanban-list\">\n              <div class=\"kanban-item\" cdkDrag\n                [style.borderTop]=\"experiment?.borderColor ? '3px solid ' + experiment?.borderColor : ''\">\n                <div class=\"task-card\">\n                  <!-- Header -->\n                  <div class=\"task-header\" *ngIf=\"experiment.header\">\n                    <ng-container *ngFor=\"let item of experiment.header\">\n                      <ng-container *ngIf=\"item.type === 'link'\">\n                        <span class=\"link\">\n                          <a [href]=\"item.url\">{{ item.label }}</a>\n                        </span>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.type === 'chip'\">\n                        <span class=\"chip-container\">\n                          <span *ngFor=\"let chip of item.value\" class=\"chip\"\n                            [style.backgroundColor]=\"chip?.backgroundColor\" [style.color]=\"chip?.foregroundColor\">{{\n                            chip?.value\n                            }}</span>\n                        </span>\n                      </ng-container>\n                      <!-- Add more header types as needed -->\n                    </ng-container>\n                  </div>\n\n                  <!-- Body -->\n                  <div class=\"task-body\" *ngIf=\"experiment.body.description\">\n                    <p>{{ experiment.body.description }}</p>\n                  </div>\n\n                  <!-- Footer -->\n                  <div class=\"task-footer\" *ngIf=\"experiment.footer\">\n                    <ng-container *ngFor=\"let item of experiment.footer\">\n                      <div class=\"avatar\" *ngIf=\"item.type === 'avatar'\">\n                        <img *ngIf=\"item?.photo\" [src]=\"item?.photo\" alt=\"{{ item.label }}\" />\n                        <span>{{ item.label }}</span>\n                      </div>\n                      <ng-container *ngIf=\"item.type === 'budget'\">\n                        <div>Budget: {{ item.value }}</div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.type === 'timeFrame'\">\n                        <div>Time Frame: {{ item.value }}</div>\n                      </ng-container>\n                      <!-- Add more footer types as needed -->\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </td>\n        </tr>\n\n      </ng-container>\n    </tbody>\n  </table>\n</ng-container>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example illustrates the default functionalities of the Kanban component. You can drag and drop cards across different states of the Kanban board by default.',\n      },\n    },\n  },\n  args: {\n    data: kanbanData\n  },\n}"
            },
            {
                "name": "kanbanData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    heading: 'To Do',\n    tasks: [\n      {\n        id: 1,\n        header: [\n          { type: 'link', label: 'EP-1', url: 'https://example.com' },\n          { type: 'chip', value: [{ value: 'To Do', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }] },\n        ],\n        body: { description: 'User-Perceived Value Validation. User-Perceived Value Validation' },\n        footer: [\n          { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n          { type: 'budget', label: 'Budget', value: '$100' },\n          { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n        ],\n        borderColor: '#4784fc'\n      },\n      {\n        id: 2,\n        header: [\n          { type: 'link', label: 'EP-2', url: 'https://another-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 3', backgroundColor: 'green' }, { value: 'Tag 4', backgroundColor: 'orange' }] },\n        ],\n        body: { description: 'Description for Task 2' },\n        footer: [\n          { type: 'avatar', label: 'John Doe', photo: 'https://picsum.photos/200' },\n          { type: 'budget', label: 'Budget', value: '$200' },\n          { type: 'timeFrame', label: 'Time Frame', value: '2 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n    action: {\n      label: '+ Add Experiment',\n      event: ($event: any, column: any) => {\n        console.log(\"Added new experiment action performed: \", column, $event)\n      }\n    }\n  },\n  {\n    id: 2,\n    heading: 'In Progress',\n    tasks: [\n      {\n        id: 3,\n        header: [\n          { type: 'link', label: 'EP-3', url: 'https://third-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 5', backgroundColor: 'purple' }] },\n        ],\n        body: { description: 'Description for Task 3' },\n        footer: [\n          { type: 'avatar', label: 'Jane Smith', photo: 'https://picsum.photos/202' },\n          { type: 'budget', label: 'Budget', value: '$300' },\n          { type: 'timeFrame', label: 'Time Frame', value: '3 months' },\n        ],\n        borderColor: '#FFCA11'\n      },\n      {\n        id: 4,\n        header: [\n          { type: 'link', label: 'EP-4', url: 'https://fourth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 6', backgroundColor: 'brown' }] },\n        ],\n        body: { description: 'User-Perceived Value Validation' },\n        footer: [\n          { type: 'avatar', label: 'Michael Johnson', photo: 'https://picsum.photos/203' },\n          { type: 'budget', label: 'Budget', value: '$400' },\n          { type: 'timeFrame', label: 'Time Frame', value: '4 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n    action: {\n      label: '+ Add Experiment',\n      event: ($event: any, column: any) => {\n        console.log(\"Added new experiment action performed: \", column, $event)\n      }\n    }\n  },\n  {\n    id: 3,\n    heading: 'Done',\n    tasks: [\n      {\n        id: 5,\n        header: [\n          { type: 'link', label: 'EP-5', url: 'https://fifth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 7', backgroundColor: 'pink', foregroundColor: '#000000' }] },\n        ],\n        body: { description: 'Description for Completed Task 1' },\n        footer: [\n          { type: 'avatar', label: 'Sarah Adams', photo: 'https://picsum.photos/204' },\n          { type: 'budget', label: 'Budget', value: '$500' },\n          { type: 'timeFrame', label: 'Time Frame', value: '5 months' },\n        ],\n        borderColor: '#FFCA11'\n      },\n      {\n        id: 6,\n        header: [\n          { type: 'link', label: 'EP-6333', url: 'https://sixth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 8', backgroundColor: 'yellow', foregroundColor: '#000000' }] },\n        ],\n        body: { description: 'Description for Completed Task 2' },\n        footer: [\n          { type: 'avatar', label: 'Emily Wilson', photo: 'https://picsum.photos/205' },\n          { type: 'budget', label: 'Budget', value: '$600' },\n          { type: 'timeFrame', label: 'Time Frame', value: '6 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n  },\n]"
            },
            {
                "name": "kanbanDataWithSwimlanes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    heading: 'User Journey',\n    columns: [\n      {\n        id: 1,\n        heading: 'To Do',\n        tasks: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EP-1', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'User-Perceived Value Validation. User-Perceived Value Validation' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 2,\n            header: [\n              { type: 'link', label: 'EP-2', url: 'https://another-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 3', backgroundColor: 'green' }, { value: 'Tag 4', backgroundColor: 'orange' }] },\n            ],\n            body: { description: 'Description for Task 2' },\n            footer: [\n              { type: 'avatar', label: 'John Doe', photo: 'https://picsum.photos/200' },\n              { type: 'budget', label: 'Budget', value: '$200' },\n              { type: 'timeFrame', label: 'Time Frame', value: '2 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n        action: {\n          label: '+ Add experiment',\n          event: ($event: any, column: any) => {\n            console.log(\"Added new experiment action performed: \", column, $event);\n          }\n        }\n      },\n      {\n        id: 2,\n        heading: 'In Progress',\n        tasks: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EP-3', url: 'https://third-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 5', backgroundColor: 'purple' }] },\n            ],\n            body: { description: 'Description for Task 3' },\n            footer: [\n              { type: 'avatar', label: 'Jane Smith', photo: 'https://picsum.photos/202' },\n              { type: 'budget', label: 'Budget', value: '$300' },\n              { type: 'timeFrame', label: 'Time Frame', value: '3 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n          {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EP-4', url: 'https://fourth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 6', backgroundColor: 'brown' }] },\n            ],\n            body: { description: 'User-Perceived Value Validation' },\n            footer: [\n              { type: 'avatar', label: 'Michael Johnson', photo: 'https://picsum.photos/203' },\n              { type: 'budget', label: 'Budget', value: '$400' },\n              { type: 'timeFrame', label: 'Time Frame', value: '4 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      },\n      {\n        id: 3,\n        heading: 'Done',\n        tasks: [\n          {\n            id: 5,\n            header: [\n              { type: 'link', label: 'EP-5', url: 'https://fifth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 7', backgroundColor: 'pink', foregroundColor: '#000000' }] },\n            ],\n            body: { description: 'Description for Completed Task 1' },\n            footer: [\n              { type: 'avatar', label: 'Sarah Adams', photo: 'https://picsum.photos/204' },\n              { type: 'budget', label: 'Budget', value: '$500' },\n              { type: 'timeFrame', label: 'Time Frame', value: '5 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n          {\n            id: 6,\n            header: [\n              { type: 'link', label: 'EP-6333', url: 'https://sixth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 8', backgroundColor: 'yellow', foregroundColor: '#000000' }] },\n            ],\n            body: { description: 'Description for Completed Task 2' },\n            footer: [\n              { type: 'avatar', label: 'Emily Wilson', photo: 'https://picsum.photos/205' },\n              { type: 'budget', label: 'Budget', value: '$600' },\n              { type: 'timeFrame', label: 'Time Frame', value: '6 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      }\n    ]\n  },\n  {\n    id: 2,\n    heading: 'Technical Implementation',\n    columns: [\n      {\n        id: 1,\n        heading: 'To Do',\n        tasks: [\n          {\n            id: 7,\n            header: [\n              { type: 'link', label: 'EP-7', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 9', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 10', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'New Task in To Do' },\n            footer: [\n              { type: 'avatar', label: 'Alice Brown', photo: 'https://picsum.photos/206' },\n              { type: 'budget', label: 'Budget', value: '$150' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1.5 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n        action: {\n          label: '+ Add task',\n          event: ($event: any, column: any) => {\n            console.log(\"Added new task action performed: \", column, $event);\n          }\n        }\n      },\n      {\n        id: 2,\n        heading: 'In Progress',\n        tasks: [\n          {\n            id: 8,\n            header: [\n              { type: 'link', label: 'EP-8', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 11', backgroundColor: 'blue' }] },\n            ],\n            body: { description: 'New Task in Progress' },\n            footer: [\n              { type: 'avatar', label: 'Bob Smith', photo: 'https://picsum.photos/207' },\n              { type: 'budget', label: 'Budget', value: '$250' },\n              { type: 'timeFrame', label: 'Time Frame', value: '2.5 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n        ],\n        toggleColumn: true,\n      },\n      {\n        id: 3,\n        heading: 'Done',\n        tasks: [\n          {\n            id: 9,\n            header: [\n              { type: 'link', label: 'EP-9', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 12', backgroundColor: 'red', foregroundColor: '#ffffff' }] },\n            ],\n            body: { description: 'New Completed Task' },\n            footer: [\n              { type: 'avatar', label: 'Charlie Green', photo: 'https://picsum.photos/208' },\n              { type: 'budget', label: 'Budget', value: '$350' },\n              { type: 'timeFrame', label: 'Time Frame', value: '3.5 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      }\n    ]\n  }\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<KanbanComponent>",
                "defaultValue": "{\n  title: 'Components/Kanban',\n  component: KanbanComponent,\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'This is a Kanban component that allows for managing tasks within columns and swimlanes. It supports drag-and-drop functionality and can be collapsed or expanded for a better user experience. The component showcases features like sorting cards, enabling drag-and-drop across swimlanes, showing or hiding empty rows, displaying item counts, and managing swimlane frozen rows.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SVG_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2 2.667a.667.667 0 0 0-.662.588l-.005.078v4.334a2.333 2.333 0 0 0 2.206 2.33l.128.003h8.723l-2.195 2.195a.67.67 0 0 0-.055.88l.055.063a.67.67 0 0 0 .88.055l.063-.055 3.333-3.333a1 1 0 0 0 .065-.075l.047-.073.036-.076.024-.07.016-.078.005-.04.003-.06-.002-.05-.012-.084-.02-.074-.029-.074-.035-.065-.042-.061-.056-.063-3.333-3.333a.667.667 0 0 0-.998.88l.055.062 2.195 2.196H3.667a1 1 0 0 1-.996-.904l-.004-.096V3.333A.667.667 0 0 0 2 2.667\" fill=\"#573DF4\"/></svg>`"
            },
            {
                "name": "Swimlane",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example showcases the swimlane features of the Kanban component. The property panel allows you to sort cards, enable drag-and-drop across swimlanes, display or hide empty rows, view item counts, and manage swimlane frozen rows. Additionally, you can expand or collapse swimlane rows within the Kanban board.',\n      },\n    },\n  },\n  args: {\n    data: kanbanDataWithSwimlanes,\n    type: \"swimlane\"\n  },\n}"
            },
            {
                "name": "tableHeaders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{\n  label: 'Opportunities',\n  toggleColumn: true\n},\n{\n  label: 'Solutions',\n  toggleColumn: true\n},\n{\n  label: 'Experiments',\n  toggleColumn: true\n}]"
            },
            {
                "name": "Workflow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates the functionalities of a hierarchical structure with opportunities as root nodes, each having multiple solutions as children, and each solution further having multiple experiments. By interacting with the nodes, you can explore the relationships, revealing the hierarchy and flow.',\n      },\n    },\n  },\n  args: {\n    data: workflowItems,\n    tableHeaders,\n    type: \"workflow\"\n  },\n}"
            },
            {
                "name": "workflowItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    opportunity: {\n      id: 1,\n      header: [\n        { type: 'link', label: 'EP-1', url: 'https://example.com' },\n        { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n      ],\n      body: { description: 'To assess whether users perceive a high value from using Shorter Loop.' },\n      footer: [\n        { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n        { type: 'budget', label: 'Budget', value: '$100' },\n        { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n      ],\n      borderColor: '#4784fc',\n      action: {\n        label: '+ Add Solution',\n        icon: SVG_ICON,\n        event: ($event: any, column: any) => {\n          console.log(\"Added new experiment action performed: \", column, $event);\n        }\n      },\n    },\n    solutions: [\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.1' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        }\n        , experiments: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-199', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-200', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.3' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      },\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n\n        }, experiments: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EX-99', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 5,\n            header: [\n              { type: 'link', label: 'EX-100', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.3' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    opportunity: {\n      id: 2,\n      header: [\n        { type: 'link', label: 'EP-400', url: 'https://example.com' },\n        { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n      ],\n      body: { description: 'Opportunity 2' },\n      footer: [\n        { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n        { type: 'budget', label: 'Budget', value: '$100' },\n        { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n      ],\n      borderColor: '#4784fc',\n      action: {\n        label: '+ Add Solution',\n        icon: SVG_ICON,\n        event: ($event: any, column: any) => {\n          console.log(\"Added new experiment action performed: \", column, $event);\n        }\n      }\n    },\n    solutions: [\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1000', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        }\n        , experiments: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      },\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 2.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Solution',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        },\n        experiments: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EX-99', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      }\n    ]\n  },\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "KanbanData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Column[] | Swimlane[] | any[]",
                "file": "projects/ui/src/lib/kanban/kanban.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<KanbanComponent>",
                "file": "projects/ui/src/stories/kanban.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
                }
            ],
            "projects/ui/src/stories/kanban.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example illustrates the default functionalities of the Kanban component. You can drag and drop cards across different states of the Kanban board by default.',\n      },\n    },\n  },\n  args: {\n    data: kanbanData\n  },\n}"
                },
                {
                    "name": "kanbanData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    heading: 'To Do',\n    tasks: [\n      {\n        id: 1,\n        header: [\n          { type: 'link', label: 'EP-1', url: 'https://example.com' },\n          { type: 'chip', value: [{ value: 'To Do', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }] },\n        ],\n        body: { description: 'User-Perceived Value Validation. User-Perceived Value Validation' },\n        footer: [\n          { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n          { type: 'budget', label: 'Budget', value: '$100' },\n          { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n        ],\n        borderColor: '#4784fc'\n      },\n      {\n        id: 2,\n        header: [\n          { type: 'link', label: 'EP-2', url: 'https://another-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 3', backgroundColor: 'green' }, { value: 'Tag 4', backgroundColor: 'orange' }] },\n        ],\n        body: { description: 'Description for Task 2' },\n        footer: [\n          { type: 'avatar', label: 'John Doe', photo: 'https://picsum.photos/200' },\n          { type: 'budget', label: 'Budget', value: '$200' },\n          { type: 'timeFrame', label: 'Time Frame', value: '2 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n    action: {\n      label: '+ Add Experiment',\n      event: ($event: any, column: any) => {\n        console.log(\"Added new experiment action performed: \", column, $event)\n      }\n    }\n  },\n  {\n    id: 2,\n    heading: 'In Progress',\n    tasks: [\n      {\n        id: 3,\n        header: [\n          { type: 'link', label: 'EP-3', url: 'https://third-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 5', backgroundColor: 'purple' }] },\n        ],\n        body: { description: 'Description for Task 3' },\n        footer: [\n          { type: 'avatar', label: 'Jane Smith', photo: 'https://picsum.photos/202' },\n          { type: 'budget', label: 'Budget', value: '$300' },\n          { type: 'timeFrame', label: 'Time Frame', value: '3 months' },\n        ],\n        borderColor: '#FFCA11'\n      },\n      {\n        id: 4,\n        header: [\n          { type: 'link', label: 'EP-4', url: 'https://fourth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 6', backgroundColor: 'brown' }] },\n        ],\n        body: { description: 'User-Perceived Value Validation' },\n        footer: [\n          { type: 'avatar', label: 'Michael Johnson', photo: 'https://picsum.photos/203' },\n          { type: 'budget', label: 'Budget', value: '$400' },\n          { type: 'timeFrame', label: 'Time Frame', value: '4 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n    action: {\n      label: '+ Add Experiment',\n      event: ($event: any, column: any) => {\n        console.log(\"Added new experiment action performed: \", column, $event)\n      }\n    }\n  },\n  {\n    id: 3,\n    heading: 'Done',\n    tasks: [\n      {\n        id: 5,\n        header: [\n          { type: 'link', label: 'EP-5', url: 'https://fifth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 7', backgroundColor: 'pink', foregroundColor: '#000000' }] },\n        ],\n        body: { description: 'Description for Completed Task 1' },\n        footer: [\n          { type: 'avatar', label: 'Sarah Adams', photo: 'https://picsum.photos/204' },\n          { type: 'budget', label: 'Budget', value: '$500' },\n          { type: 'timeFrame', label: 'Time Frame', value: '5 months' },\n        ],\n        borderColor: '#FFCA11'\n      },\n      {\n        id: 6,\n        header: [\n          { type: 'link', label: 'EP-6333', url: 'https://sixth-example.com' },\n          { type: 'chip', value: [{ value: 'Tag 8', backgroundColor: 'yellow', foregroundColor: '#000000' }] },\n        ],\n        body: { description: 'Description for Completed Task 2' },\n        footer: [\n          { type: 'avatar', label: 'Emily Wilson', photo: 'https://picsum.photos/205' },\n          { type: 'budget', label: 'Budget', value: '$600' },\n          { type: 'timeFrame', label: 'Time Frame', value: '6 months' },\n        ],\n        borderColor: '#4784fc'\n      },\n    ],\n    toggleColumn: true,\n  },\n]"
                },
                {
                    "name": "kanbanDataWithSwimlanes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    heading: 'User Journey',\n    columns: [\n      {\n        id: 1,\n        heading: 'To Do',\n        tasks: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EP-1', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'User-Perceived Value Validation. User-Perceived Value Validation' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 2,\n            header: [\n              { type: 'link', label: 'EP-2', url: 'https://another-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 3', backgroundColor: 'green' }, { value: 'Tag 4', backgroundColor: 'orange' }] },\n            ],\n            body: { description: 'Description for Task 2' },\n            footer: [\n              { type: 'avatar', label: 'John Doe', photo: 'https://picsum.photos/200' },\n              { type: 'budget', label: 'Budget', value: '$200' },\n              { type: 'timeFrame', label: 'Time Frame', value: '2 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n        action: {\n          label: '+ Add experiment',\n          event: ($event: any, column: any) => {\n            console.log(\"Added new experiment action performed: \", column, $event);\n          }\n        }\n      },\n      {\n        id: 2,\n        heading: 'In Progress',\n        tasks: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EP-3', url: 'https://third-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 5', backgroundColor: 'purple' }] },\n            ],\n            body: { description: 'Description for Task 3' },\n            footer: [\n              { type: 'avatar', label: 'Jane Smith', photo: 'https://picsum.photos/202' },\n              { type: 'budget', label: 'Budget', value: '$300' },\n              { type: 'timeFrame', label: 'Time Frame', value: '3 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n          {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EP-4', url: 'https://fourth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 6', backgroundColor: 'brown' }] },\n            ],\n            body: { description: 'User-Perceived Value Validation' },\n            footer: [\n              { type: 'avatar', label: 'Michael Johnson', photo: 'https://picsum.photos/203' },\n              { type: 'budget', label: 'Budget', value: '$400' },\n              { type: 'timeFrame', label: 'Time Frame', value: '4 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      },\n      {\n        id: 3,\n        heading: 'Done',\n        tasks: [\n          {\n            id: 5,\n            header: [\n              { type: 'link', label: 'EP-5', url: 'https://fifth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 7', backgroundColor: 'pink', foregroundColor: '#000000' }] },\n            ],\n            body: { description: 'Description for Completed Task 1' },\n            footer: [\n              { type: 'avatar', label: 'Sarah Adams', photo: 'https://picsum.photos/204' },\n              { type: 'budget', label: 'Budget', value: '$500' },\n              { type: 'timeFrame', label: 'Time Frame', value: '5 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n          {\n            id: 6,\n            header: [\n              { type: 'link', label: 'EP-6333', url: 'https://sixth-example.com' },\n              { type: 'chip', value: [{ value: 'Tag 8', backgroundColor: 'yellow', foregroundColor: '#000000' }] },\n            ],\n            body: { description: 'Description for Completed Task 2' },\n            footer: [\n              { type: 'avatar', label: 'Emily Wilson', photo: 'https://picsum.photos/205' },\n              { type: 'budget', label: 'Budget', value: '$600' },\n              { type: 'timeFrame', label: 'Time Frame', value: '6 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      }\n    ]\n  },\n  {\n    id: 2,\n    heading: 'Technical Implementation',\n    columns: [\n      {\n        id: 1,\n        heading: 'To Do',\n        tasks: [\n          {\n            id: 7,\n            header: [\n              { type: 'link', label: 'EP-7', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 9', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 10', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'New Task in To Do' },\n            footer: [\n              { type: 'avatar', label: 'Alice Brown', photo: 'https://picsum.photos/206' },\n              { type: 'budget', label: 'Budget', value: '$150' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1.5 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n        action: {\n          label: '+ Add task',\n          event: ($event: any, column: any) => {\n            console.log(\"Added new task action performed: \", column, $event);\n          }\n        }\n      },\n      {\n        id: 2,\n        heading: 'In Progress',\n        tasks: [\n          {\n            id: 8,\n            header: [\n              { type: 'link', label: 'EP-8', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 11', backgroundColor: 'blue' }] },\n            ],\n            body: { description: 'New Task in Progress' },\n            footer: [\n              { type: 'avatar', label: 'Bob Smith', photo: 'https://picsum.photos/207' },\n              { type: 'budget', label: 'Budget', value: '$250' },\n              { type: 'timeFrame', label: 'Time Frame', value: '2.5 months' },\n            ],\n            borderColor: '#FFCA11'\n          },\n        ],\n        toggleColumn: true,\n      },\n      {\n        id: 3,\n        heading: 'Done',\n        tasks: [\n          {\n            id: 9,\n            header: [\n              { type: 'link', label: 'EP-9', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 12', backgroundColor: 'red', foregroundColor: '#ffffff' }] },\n            ],\n            body: { description: 'New Completed Task' },\n            footer: [\n              { type: 'avatar', label: 'Charlie Green', photo: 'https://picsum.photos/208' },\n              { type: 'budget', label: 'Budget', value: '$350' },\n              { type: 'timeFrame', label: 'Time Frame', value: '3.5 months' },\n            ],\n            borderColor: '#4784fc'\n          },\n        ],\n        toggleColumn: true,\n      }\n    ]\n  }\n]"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<KanbanComponent>",
                    "defaultValue": "{\n  title: 'Components/Kanban',\n  component: KanbanComponent,\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      description: {\n        component: 'This is a Kanban component that allows for managing tasks within columns and swimlanes. It supports drag-and-drop functionality and can be collapsed or expanded for a better user experience. The component showcases features like sorting cards, enabling drag-and-drop across swimlanes, showing or hiding empty rows, displaying item counts, and managing swimlane frozen rows.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "SVG_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2 2.667a.667.667 0 0 0-.662.588l-.005.078v4.334a2.333 2.333 0 0 0 2.206 2.33l.128.003h8.723l-2.195 2.195a.67.67 0 0 0-.055.88l.055.063a.67.67 0 0 0 .88.055l.063-.055 3.333-3.333a1 1 0 0 0 .065-.075l.047-.073.036-.076.024-.07.016-.078.005-.04.003-.06-.002-.05-.012-.084-.02-.074-.029-.074-.035-.065-.042-.061-.056-.063-3.333-3.333a.667.667 0 0 0-.998.88l.055.062 2.195 2.196H3.667a1 1 0 0 1-.996-.904l-.004-.096V3.333A.667.667 0 0 0 2 2.667\" fill=\"#573DF4\"/></svg>`"
                },
                {
                    "name": "Swimlane",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example showcases the swimlane features of the Kanban component. The property panel allows you to sort cards, enable drag-and-drop across swimlanes, display or hide empty rows, view item counts, and manage swimlane frozen rows. Additionally, you can expand or collapse swimlane rows within the Kanban board.',\n      },\n    },\n  },\n  args: {\n    data: kanbanDataWithSwimlanes,\n    type: \"swimlane\"\n  },\n}"
                },
                {
                    "name": "tableHeaders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{\n  label: 'Opportunities',\n  toggleColumn: true\n},\n{\n  label: 'Solutions',\n  toggleColumn: true\n},\n{\n  label: 'Experiments',\n  toggleColumn: true\n}]"
                },
                {
                    "name": "Workflow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates the functionalities of a hierarchical structure with opportunities as root nodes, each having multiple solutions as children, and each solution further having multiple experiments. By interacting with the nodes, you can explore the relationships, revealing the hierarchy and flow.',\n      },\n    },\n  },\n  args: {\n    data: workflowItems,\n    tableHeaders,\n    type: \"workflow\"\n  },\n}"
                },
                {
                    "name": "workflowItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    opportunity: {\n      id: 1,\n      header: [\n        { type: 'link', label: 'EP-1', url: 'https://example.com' },\n        { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n      ],\n      body: { description: 'To assess whether users perceive a high value from using Shorter Loop.' },\n      footer: [\n        { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n        { type: 'budget', label: 'Budget', value: '$100' },\n        { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n      ],\n      borderColor: '#4784fc',\n      action: {\n        label: '+ Add Solution',\n        icon: SVG_ICON,\n        event: ($event: any, column: any) => {\n          console.log(\"Added new experiment action performed: \", column, $event);\n        }\n      },\n    },\n    solutions: [\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.1' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        }\n        , experiments: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-199', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-200', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.3' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      },\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n\n        }, experiments: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EX-99', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          },\n          {\n            id: 5,\n            header: [\n              { type: 'link', label: 'EX-100', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.3' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    opportunity: {\n      id: 2,\n      header: [\n        { type: 'link', label: 'EP-400', url: 'https://example.com' },\n        { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n      ],\n      body: { description: 'Opportunity 2' },\n      footer: [\n        { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n        { type: 'budget', label: 'Budget', value: '$100' },\n        { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n      ],\n      borderColor: '#4784fc',\n      action: {\n        label: '+ Add Solution',\n        icon: SVG_ICON,\n        event: ($event: any, column: any) => {\n          console.log(\"Added new experiment action performed: \", column, $event);\n        }\n      }\n    },\n    solutions: [\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1000', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 1.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Experiment',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        }\n        , experiments: [\n          {\n            id: 1,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.1.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      },\n      {\n        solution:\n        {\n          id: 1,\n          header: [\n            { type: 'link', label: 'EP-1', url: 'https://example.com' },\n            { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n          ],\n          body: { description: 'Solution 2.2' },\n          footer: [\n            { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n            { type: 'budget', label: 'Budget', value: '$100' },\n            { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n          ],\n          borderColor: '#4784fc',\n          action: {\n            label: '+ Add Solution',\n            icon: SVG_ICON,\n            event: ($event: any, column: any) => {\n              console.log(\"Added new experiment action performed: \", column, $event);\n            }\n          }\n        },\n        experiments: [\n          {\n            id: 3,\n            header: [\n              { type: 'link', label: 'EX-98', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.1' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }, {\n            id: 4,\n            header: [\n              { type: 'link', label: 'EX-99', url: 'https://example.com' },\n              { type: 'chip', value: [{ value: 'Tag 1', backgroundColor: '#FFF1F1', foregroundColor: '#D3272A' }, { value: 'Tag 2', backgroundColor: '#009042' }] },\n            ],\n            body: { description: 'Experiment 1.2.2' },\n            footer: [\n              { type: 'avatar', label: 'Dinesh Rawat', photo: 'https://picsum.photos/201' },\n              { type: 'budget', label: 'Budget', value: '$100' },\n              { type: 'timeFrame', label: 'Time Frame', value: '1 month' },\n            ],\n            borderColor: '#4784fc'\n          }\n        ]\n      }\n    ]\n  },\n]"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ui/src/lib/kanban/kanban.component.ts": [
                {
                    "name": "KanbanData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Column[] | Swimlane[] | any[]",
                    "file": "projects/ui/src/lib/kanban/kanban.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ui/src/stories/kanban.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<KanbanComponent>",
                    "file": "projects/ui/src/stories/kanban.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ui/src/lib/kanban/column-names.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ColumnNamesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/lib/kanban/kanban.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KanbanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/lib/kanban/kanban.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/lib/kanban/kanban.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibraryItem",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/lib/kanban/kanban.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Swimlane",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/lib/kanban/kanban.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kanbanData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "kanbanDataWithSwimlanes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SVG_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Swimlane",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableHeaders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Workflow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/stories/kanban.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "workflowItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}